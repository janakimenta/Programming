import java.util.LinkedList;
import java.util.Queue;
import java.util.Iterator;
public class DirectedGraph{
    
   
        int vertices;
        LinkedList<Character> adj[];
         public DirectedGraph(int vertices)
        {
            this.vertices = vertices;
            adj = new LinkedList[vertices];
            for(int i=0;i< vertices ; i++)
            adj[i] = new LinkedList<Character>();
        }
  
    
     void addEdge(Character v,Character w)
    {
        adj[v].add(w);
    }
    
      boolean checkIfPathExists(Character u, Character v)
    {
        boolean visited[] = new boolean[vertices];
        Queue<Character> queue = new LinkedList<Character>();
         visited[u] = true;
        queue.add(u);
        while(!queue.isEmpty())
        {
            u = queue.remove();
           
            Iterator<Character> itr = adj[u].iterator();
            while(itr.hasNext())
            {
                Character n = itr.next();
                if(n==v)
                {
                    return true;
                }
                if(!visited[n])
                {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
        return false;
    }
     public static void main(String[] args){
        DirectedGraph dg = new DirectedGraph(100);
        dg.addEdge('A','C');
         dg.addEdge('A','B');
          dg.addEdge('B','D');
           dg.addEdge('B','C');
            dg.addEdge('C','D');
        System.out.println(dg.checkIfPathExists('C','A'));
       
        
     }
}
